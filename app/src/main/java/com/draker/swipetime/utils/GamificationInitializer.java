package com.draker.swipetime.utils;

import android.content.Context;
import android.util.Log;

import com.draker.swipetime.database.entities.AchievementEntity;
import com.draker.swipetime.database.entities.ChallengeMilestoneEntity;
import com.draker.swipetime.database.entities.CollectibleItemEntity;
import com.draker.swipetime.database.entities.DailyQuestEntity;
import com.draker.swipetime.database.entities.SeasonalEventEntity;
import com.draker.swipetime.database.entities.ThematicChallengeEntity;
import com.draker.swipetime.database.entities.UserRankEntity;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
public class GamificationInitializer {
    
    private static final String TAG = "GamificationInitializer";
    
    private final Context context;
    private AdvancedGamificationIntegrator gamificationIntegrator;
    
    public GamificationInitializer(Context context) {
        this.context = context.getApplicationContext();
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    public void initializeGamificationSystems() {
        try {
            Log.d(TAG, "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
            gamificationIntegrator = AdvancedGamificationIntegrator.getInstance(context);
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
            setupGlobalEventListener();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
            gamificationIntegrator.refreshAllSystems();
            
            Log.d(TAG, "–°–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã");
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: " + e.getMessage());
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void initializeUserGamification(String userId) {
        try {
            Log.d(TAG, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + userId);
            
            if (gamificationIntegrator == null) {
                gamificationIntegrator = AdvancedGamificationIntegrator.getInstance(context);
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
            gamificationIntegrator.initializeUserInAllSystems(userId);
            
            Log.d(TAG, "–ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + userId + " —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param action —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
     * @param data –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param category –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    public void processUserAction(String userId, String action, String data, String category) {
        try {
            if (gamificationIntegrator == null) {
                gamificationIntegrator = AdvancedGamificationIntegrator.getInstance(context);
            }
            
            gamificationIntegrator.processUserAction(userId, action, data, category);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return —Å–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
     */
    public AdvancedGamificationIntegrator.GamificationSummary getUserSummary(String userId) {
        try {
            if (gamificationIntegrator == null) {
                gamificationIntegrator = AdvancedGamificationIntegrator.getInstance(context);
            }
            
            return gamificationIntegrator.getUserGamificationSummary(userId);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + e.getMessage());
            return null;
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–±—ã—Ç–∏–π –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    private void setupGlobalEventListener() {
        gamificationIntegrator.setGamificationEventListener(new AdvancedGamificationIntegrator.OnGamificationEventListener() {
            @Override
            public void onAchievementUnlocked(AchievementEntity achievement, int experienceGained) {
                Log.d(TAG, "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: " + achievement.getName() + " (+" + experienceGained + " XP)");
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                showAchievementNotification(achievement, experienceGained);
            }

            @Override
            public void onLevelUp(int newLevel, int experienceGained) {
                Log.d(TAG, "‚¨ÜÔ∏è –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è: " + newLevel + " (+" + experienceGained + " XP)");
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
                showLevelUpNotification(newLevel, experienceGained);
            }

            @Override
            public void onQuestCompleted(DailyQuestEntity quest, int experienceGained) {
                Log.d(TAG, "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: " + quest.getTitle() + " (+" + experienceGained + " XP)");
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è
                showQuestCompletedNotification(quest, experienceGained);
            }

            @Override
            public void onEventStarted(SeasonalEventEntity event) {
                Log.d(TAG, "üéâ –ù–∞—á–∞–ª–æ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: " + event.getTitle());
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–æ–±—ã—Ç–∏—è
                showEventStartedNotification(event);
            }

            @Override
            public void onEventEnded(SeasonalEventEntity event) {
                Log.d(TAG, "üé≠ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: " + event.getTitle());
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
                showEventEndedNotification(event);
            }

            @Override
            public void onItemObtained(CollectibleItemEntity item, String source) {
                Log.d(TAG, "üíé –ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: " + item.getName() + " (–∏—Å—Ç–æ—á–Ω–∏–∫: " + source + ")");
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
                showItemObtainedNotification(item, source);
            }

            @Override
            public void onChallengeCompleted(ThematicChallengeEntity challenge, int experienceGained) {
                Log.d(TAG, "üö© –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: " + challenge.getTitle() + " (+" + experienceGained + " XP)");
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
                showChallengeCompletedNotification(challenge, experienceGained);
            }

            @Override
            public void onChallengeMilestoneReached(ChallengeMilestoneEntity milestone, int experienceGained) {
                Log.d(TAG, "üéØ –≠—Ç–∞–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: " + milestone.getTitle() + " (+" + experienceGained + " XP)");
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞
            }

            @Override
            public void onRankUnlocked(UserRankEntity rank, int experienceGained) {
                Log.d(TAG, "üëë –†–∞–Ω–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: " + rank.getName() + " (+" + experienceGained + " XP)");
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ä–∞–Ω–≥–∞
                showRankUnlockedNotification(rank, experienceGained);
            }

            @Override
            public void onRankActivated(UserRankEntity rank) {
                Log.d(TAG, "‚≠ê –†–∞–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: " + rank.getName());
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞–Ω–≥–∞
                showRankActivatedNotification(rank);
            }
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     * @param achievement –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
     * @param experienceGained –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
     */
    private void showAchievementNotification(AchievementEntity achievement, int experienceGained) {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑ Toast, SnackBar –∏–ª–∏ custom notification
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É—è AchievementNotifier
        try {
            AchievementNotifier notifier = new AchievementNotifier(context);
            notifier.showAchievementUnlocked(achievement, experienceGained);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
     * @param newLevel –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
     * @param experienceGained –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
     */
    private void showLevelUpNotification(int newLevel, int experienceGained) {
        try {
            AchievementNotifier notifier = new AchievementNotifier(context);
            notifier.showLevelUp(newLevel, experienceGained);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
     * @param quest –∑–∞–¥–∞–Ω–∏–µ
     * @param experienceGained –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
     */
    private void showQuestCompletedNotification(DailyQuestEntity quest, int experienceGained) {
        try {
            AchievementNotifier notifier = new AchievementNotifier(context);
            notifier.showQuestCompleted(quest, experienceGained);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
     * @param event —Å–æ–±—ã—Ç–∏–µ
     */
    private void showEventStartedNotification(SeasonalEventEntity event) {
        try {
            AchievementNotifier notifier = new AchievementNotifier(context);
            notifier.showEventStarted(event);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
     * @param event —Å–æ–±—ã—Ç–∏–µ
     */
    private void showEventEndedNotification(SeasonalEventEntity event) {
        try {
            AchievementNotifier notifier = new AchievementNotifier(context);
            notifier.showEventEnded(event);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
     * @param item –ø—Ä–µ–¥–º–µ—Ç
     * @param source –∏—Å—Ç–æ—á–Ω–∏–∫
     */
    private void showItemObtainedNotification(CollectibleItemEntity item, String source) {
        try {
            AchievementNotifier notifier = new AchievementNotifier(context);
            notifier.showItemObtained(item, source);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
     * @param challenge –∏—Å–ø—ã—Ç–∞–Ω–∏–µ
     * @param experienceGained –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
     */
    private void showChallengeCompletedNotification(ThematicChallengeEntity challenge, int experienceGained) {
        try {
            AchievementNotifier notifier = new AchievementNotifier(context);
            notifier.showChallengeCompleted(challenge, experienceGained);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–ø—ã—Ç–∞–Ω–∏–∏: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ä–∞–Ω–≥–∞
     * @param rank —Ä–∞–Ω–≥
     * @param experienceGained –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
     */
    private void showRankUnlockedNotification(UserRankEntity rank, int experienceGained) {
        try {
            AchievementNotifier notifier = new AchievementNotifier(context);
            notifier.showRankUnlocked(rank, experienceGained);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–Ω–≥–µ: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞–Ω–≥–∞
     * @param rank —Ä–∞–Ω–≥
     */
    private void showRankActivatedNotification(UserRankEntity rank) {
        try {
            AchievementNotifier notifier = new AchievementNotifier(context);
            notifier.showRankActivated(rank);
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞–Ω–≥–∞: " + e.getMessage());
        }
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
     */
    public void refreshAllSystems() {
        try {
            if (gamificationIntegrator == null) {
                gamificationIntegrator = AdvancedGamificationIntegrator.getInstance(context);
            }
            
            gamificationIntegrator.refreshAllSystems();
            Log.d(TAG, "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
        } catch (Exception e) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º: " + e.getMessage());
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * @return –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    public AdvancedGamificationIntegrator getGamificationIntegrator() {
        if (gamificationIntegrator == null) {
            gamificationIntegrator = AdvancedGamificationIntegrator.getInstance(context);
        }
        return gamificationIntegrator;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ª–∏ —Å–∏—Å—Ç–µ–º—ã –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
     * @return true –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
     */
    public boolean isInitialized() {
        return gamificationIntegrator != null;
    }
}
